{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to Nathaniel Docs! Other pages contain documentation about several data structures Click the dropdown link or search bar to learn more.","title":"Home"},{"location":"index.html#welcome-to-nathaniel-docs","text":"","title":"Welcome to Nathaniel Docs!"},{"location":"index.html#other-pages-contain-documentation-about-several-data-structures","text":"Click the dropdown link or search bar to learn more.","title":"Other pages contain documentation about several data structures"},{"location":"arrays.html","text":"Arrays Definition Kind of like a list inside a list but usually involves more indexes being columns and rows Programming Examples Python # numpy arrays import numpy as np arrFirst = np.array(15) arrSecond = np.array([[[5, 6, 9], [4, 3, 6]], [[1, 2, 3], [10, 5, 6]]]) print(arrFirst.ndim) print(arrSecond.ndim) C-Sharp // jagged arrays (multi-dimensional) int[][] jaggedArray = new int[3][]; jaggedArray[0] = new int[] { 1, 3, 5, 7, 9 }; jaggedArray[1] = new int[] { 0, 2, 4, 6 }; jaggedArray[2] = new int[] { 11, 22 };","title":"arrays"},{"location":"arrays.html#arrays","text":"","title":"Arrays"},{"location":"arrays.html#definition","text":"Kind of like a list inside a list but usually involves more indexes being columns and rows","title":"Definition"},{"location":"arrays.html#programming-examples","text":"","title":"Programming Examples"},{"location":"arrays.html#python","text":"# numpy arrays import numpy as np arrFirst = np.array(15) arrSecond = np.array([[[5, 6, 9], [4, 3, 6]], [[1, 2, 3], [10, 5, 6]]]) print(arrFirst.ndim) print(arrSecond.ndim)","title":"Python"},{"location":"arrays.html#c-sharp","text":"// jagged arrays (multi-dimensional) int[][] jaggedArray = new int[3][]; jaggedArray[0] = new int[] { 1, 3, 5, 7, 9 }; jaggedArray[1] = new int[] { 0, 2, 4, 6 }; jaggedArray[2] = new int[] { 11, 22 };","title":"C-Sharp"},{"location":"graphs.html","text":"Graphs Definition Usually connected by blocks/nodes and has edges that connect each block(s) Programming Examples Python # Example from: https://www.tutorialspoint.com/python_data_structure/python_graphs.htm # Create the dictionary with graph elements graph = { \"a\" : [\"b\",\"c\"], \"b\" : [\"a\", \"d\"], \"c\" : [\"a\", \"d\"], \"d\" : [\"e\"], \"e\" : [\"d\"] } # Print the graph print(graph) C-Sharp Further explanation for C#: https://www.simplilearn.com/tutorials/c-sharp-tutorial/what-is-graphs-in-c-sharp#:~:text=A%20graph%20is%20a%20non,of%20Edges%20that%20connect%20them.","title":"graphs"},{"location":"graphs.html#graphs","text":"","title":"Graphs"},{"location":"graphs.html#definition","text":"Usually connected by blocks/nodes and has edges that connect each block(s)","title":"Definition"},{"location":"graphs.html#programming-examples","text":"","title":"Programming Examples"},{"location":"graphs.html#python","text":"# Example from: https://www.tutorialspoint.com/python_data_structure/python_graphs.htm # Create the dictionary with graph elements graph = { \"a\" : [\"b\",\"c\"], \"b\" : [\"a\", \"d\"], \"c\" : [\"a\", \"d\"], \"d\" : [\"e\"], \"e\" : [\"d\"] } # Print the graph print(graph)","title":"Python"},{"location":"graphs.html#c-sharp","text":"Further explanation for C#: https://www.simplilearn.com/tutorials/c-sharp-tutorial/what-is-graphs-in-c-sharp#:~:text=A%20graph%20is%20a%20non,of%20Edges%20that%20connect%20them.","title":"C-Sharp"},{"location":"hashtables.html","text":"Hash Tables Definition Stores data and maps keys to elements, associative with arrays or dictionaries Programming Examples Python thisdict = { \"brand\": \"Ford\", \"electric\": False, \"year\": 1964, \"colors\": [\"red\", \"white\", \"blue\"] } C-Sharp // Microsoft C# Hashtable openWith = new Hashtable(); // Add some elements to the hash table. There are no // duplicate keys, but some of the values are duplicates. openWith.Add(\"txt\", \"notepad.exe\"); openWith.Add(\"bmp\", \"paint.exe\"); openWith.Add(\"dib\", \"paint.exe\"); openWith.Add(\"rtf\", \"wordpad.exe\"); // The Add method throws an exception if the new key is // already in the hash table. try { openWith.Add(\"txt\", \"winword.exe\"); } catch { Console.WriteLine(\"An element with Key = \\\"txt\\\" already exists.\"); }","title":"hash tables"},{"location":"hashtables.html#hash-tables","text":"","title":"Hash Tables"},{"location":"hashtables.html#definition","text":"Stores data and maps keys to elements, associative with arrays or dictionaries","title":"Definition"},{"location":"hashtables.html#programming-examples","text":"","title":"Programming Examples"},{"location":"hashtables.html#python","text":"thisdict = { \"brand\": \"Ford\", \"electric\": False, \"year\": 1964, \"colors\": [\"red\", \"white\", \"blue\"] }","title":"Python"},{"location":"hashtables.html#c-sharp","text":"// Microsoft C# Hashtable openWith = new Hashtable(); // Add some elements to the hash table. There are no // duplicate keys, but some of the values are duplicates. openWith.Add(\"txt\", \"notepad.exe\"); openWith.Add(\"bmp\", \"paint.exe\"); openWith.Add(\"dib\", \"paint.exe\"); openWith.Add(\"rtf\", \"wordpad.exe\"); // The Add method throws an exception if the new key is // already in the hash table. try { openWith.Add(\"txt\", \"winword.exe\"); } catch { Console.WriteLine(\"An element with Key = \\\"txt\\\" already exists.\"); }","title":"C-Sharp"},{"location":"linkedlists.html","text":"Linked-Lists Definition A list connected by nodes containing a data field/slot Further explanation: https://www.geeksforgeeks.org/data-structures/linked-list/ Programming Examples C-Sharp using System; using System.Collections.Generic; LinkedList<String> my_list = new LinkedList<String>(); my_list.AddLast(\"Zack\"); my_list.AddLast(\"Jimmy\"); foreach(string name in my_list) { Console.WriteLine(\"Name: \" + $\"{name}\") }","title":"linked lists"},{"location":"linkedlists.html#linked-lists","text":"","title":"Linked-Lists"},{"location":"linkedlists.html#definition","text":"A list connected by nodes containing a data field/slot","title":"Definition"},{"location":"linkedlists.html#further-explanation","text":"https://www.geeksforgeeks.org/data-structures/linked-list/","title":"Further explanation:"},{"location":"linkedlists.html#programming-examples","text":"","title":"Programming Examples"},{"location":"linkedlists.html#c-sharp","text":"using System; using System.Collections.Generic; LinkedList<String> my_list = new LinkedList<String>(); my_list.AddLast(\"Zack\"); my_list.AddLast(\"Jimmy\"); foreach(string name in my_list) { Console.WriteLine(\"Name: \" + $\"{name}\") }","title":"C-Sharp"},{"location":"lists.html","text":"Lists Definition Generic lists can store lengths of data to be used/saved later on. Programming Examples Python # list of integers my_list = [1, 2, 3] C-Sharp // list of animals string[] animals = { \"Cat\", \"Snake\", \"Elephant\" }; List<string> animalsList = new List<string>(animals);","title":"lists"},{"location":"lists.html#lists","text":"","title":"Lists"},{"location":"lists.html#definition","text":"Generic lists can store lengths of data to be used/saved later on.","title":"Definition"},{"location":"lists.html#programming-examples","text":"","title":"Programming Examples"},{"location":"lists.html#python","text":"# list of integers my_list = [1, 2, 3]","title":"Python"},{"location":"lists.html#c-sharp","text":"// list of animals string[] animals = { \"Cat\", \"Snake\", \"Elephant\" }; List<string> animalsList = new List<string>(animals);","title":"C-Sharp"},{"location":"queues.html","text":"Queues Definition Like a stack, however, elements are removed according to the FILO instead of being appended like a stack Programming Examples Python import collections # Example from geeksbygeeks: # https://www.geeksforgeeks.org/deque-in-python/ # initializing deque de = collections.deque([1, 2, 3]) print(\"deque: \", de) # using append() to insert element at right end # inserts 4 at the end of deque de.append(4) # printing modified deque print(\"\\nThe deque after appending at right is : \") print(de) # using appendleft() to insert element at left end # inserts 6 at the beginning of deque de.appendleft(6) # printing modified deque print(\"\\nThe deque after appending at left is : \") print(de) C-Sharp Queue<string> numbers = new Queue<string>(); numbers.Enqueue(\"one\"); numbers.Enqueue(\"two\"); numbers.Enqueue(\"three\"); numbers.Enqueue(\"four\"); numbers.Enqueue(\"five\"); // A queue can be enumerated without disturbing its contents. foreach( string number in numbers ) { Console.WriteLine(number); }","title":"queues"},{"location":"queues.html#queues","text":"","title":"Queues"},{"location":"queues.html#definition","text":"Like a stack, however, elements are removed according to the FILO instead of being appended like a stack","title":"Definition"},{"location":"queues.html#programming-examples","text":"","title":"Programming Examples"},{"location":"queues.html#python","text":"import collections # Example from geeksbygeeks: # https://www.geeksforgeeks.org/deque-in-python/ # initializing deque de = collections.deque([1, 2, 3]) print(\"deque: \", de) # using append() to insert element at right end # inserts 4 at the end of deque de.append(4) # printing modified deque print(\"\\nThe deque after appending at right is : \") print(de) # using appendleft() to insert element at left end # inserts 6 at the beginning of deque de.appendleft(6) # printing modified deque print(\"\\nThe deque after appending at left is : \") print(de)","title":"Python"},{"location":"queues.html#c-sharp","text":"Queue<string> numbers = new Queue<string>(); numbers.Enqueue(\"one\"); numbers.Enqueue(\"two\"); numbers.Enqueue(\"three\"); numbers.Enqueue(\"four\"); numbers.Enqueue(\"five\"); // A queue can be enumerated without disturbing its contents. foreach( string number in numbers ) { Console.WriteLine(number); }","title":"C-Sharp"},{"location":"stacks.html","text":"Stacks Definition A linear list but stores data in FILO/LIFO manner Programming Examples Python stack = [] # Example by geeksforgeeks: # https://www.geeksforgeeks.org/stack-in-python/ # append() function to push # element in the stack stack.append('a') stack.append('b') stack.append('c') print('Initial stack') print(stack) # pop() function to pop # element from stack in # LIFO order print('\\nElements popped from stack:') print(stack.pop()) print(stack.pop()) print(stack.pop()) C-Sharp public static void Main() { // Creates and initializes a new Stack. Stack myStack = new Stack(); myStack.Push(\"Hello\"); myStack.Push(\"World\"); myStack.Push(\"!\"); // Displays the properties and values of the Stack. Console.WriteLine( \"myStack\" ); Console.WriteLine( \"\\tCount: {0}\", myStack.Count ); Console.Write( \"\\tValues:\" ); PrintValues( myStack ); } public static void PrintValues( IEnumerable myCollection ) { foreach ( Object obj in myCollection ) Console.Write( \" {0}\", obj ); Console.WriteLine(); }","title":"stack"},{"location":"stacks.html#stacks","text":"","title":"Stacks"},{"location":"stacks.html#definition","text":"A linear list but stores data in FILO/LIFO manner","title":"Definition"},{"location":"stacks.html#programming-examples","text":"","title":"Programming Examples"},{"location":"stacks.html#python","text":"stack = [] # Example by geeksforgeeks: # https://www.geeksforgeeks.org/stack-in-python/ # append() function to push # element in the stack stack.append('a') stack.append('b') stack.append('c') print('Initial stack') print(stack) # pop() function to pop # element from stack in # LIFO order print('\\nElements popped from stack:') print(stack.pop()) print(stack.pop()) print(stack.pop())","title":"Python"},{"location":"stacks.html#c-sharp","text":"public static void Main() { // Creates and initializes a new Stack. Stack myStack = new Stack(); myStack.Push(\"Hello\"); myStack.Push(\"World\"); myStack.Push(\"!\"); // Displays the properties and values of the Stack. Console.WriteLine( \"myStack\" ); Console.WriteLine( \"\\tCount: {0}\", myStack.Count ); Console.Write( \"\\tValues:\" ); PrintValues( myStack ); } public static void PrintValues( IEnumerable myCollection ) { foreach ( Object obj in myCollection ) Console.Write( \" {0}\", obj ); Console.WriteLine(); }","title":"C-Sharp"},{"location":"trees.html","text":"Trees Definition Like a Stack but nonlinear and doesn\u2019t always have nodes Further Explanation: https://www.freecodecamp.org/news/all-you-need-to-know-about-tree-data-structures-bceacb85490c/","title":"trees"},{"location":"trees.html#trees","text":"","title":"Trees"},{"location":"trees.html#definition","text":"Like a Stack but nonlinear and doesn\u2019t always have nodes","title":"Definition"},{"location":"trees.html#further-explanation","text":"https://www.freecodecamp.org/news/all-you-need-to-know-about-tree-data-structures-bceacb85490c/","title":"Further Explanation:"}]}